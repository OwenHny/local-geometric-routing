import unittest
import routing
import graph_generation

class Test(unittest.TestCase):
    
    def one_bit_straight(self):
        graph = {}

        graph_generation.add_edge(graph, (0,0), (10,0))
        graph_generation.add_edge(graph, (10,0), (10,10))
        graph_generation.add_edge(graph, (10,10), (20,10))
        graph_generation.add_edge(graph, (20,10), (20,20))
        graph_generation.add_edge(graph, (20,20), (30,20))
        graph_generation.add_edge(graph, (30,20), (30,30))
        
        test = routing.one_bit((0, 0), (30, 30), graph)
        self.assertEqual(test, (30,30))

    def one_bit_angle(self):
        graph = {}

        graph_generation.add_edge(graph, (0,0), (0,10))
        graph_generation.add_edge(graph, (0,10), (0,20))
        graph_generation.add_edge(graph, (0,20), (0,30))
        graph_generation.add_edge(graph, (0,30), (10,30))
        graph_generation.add_edge(graph, (10,30), (30,10))
        graph_generation.add_edge(graph, (30,10), (30,0))
        
        test = routing.one_bit((0,0), (30, 0))
        self.assertEqual(test, (30, 0))

    def one_bit_u(self):
        graph = {}

        graph_generation.add_edge(graph, (0,0), (0,10))
        graph_generation.add_edge(graph, (0,10), (0,20))
        graph_generation.add_edge(graph, (0,0), (0,30))
        graph_generation.add_edge(graph, (0,30), (10,30))
        graph_generation.add_edge(graph, (10,30), (30,10))
        graph_generation.add_edge(graph, (30,10), (30,0))
        
        test = routing.one_bit((0,0), (30, 0))
        self.assertEqual(test, (30, 0))

    

    def test_face(self):
        routing.loop_recovery = True #set unstuck to always return false
        routing.num_steps = 0
        routing.face((1,9),(17,3), {(5, 11): [(3, 6), (1, 9), (9, 14)], (12, 20): [(13, 20), (9, 14)], (17, 10): [(17, 3), (9, 14)], (13, 20): [(12, 20)], (17, 3): [(17, 10)], (9, 14): [(12, 20), (17, 10), (5, 11), (3, 6), (1, 9)], (3, 6): [(5, 11), (1, 9), (9, 14)], (1, 9): [(5, 11), (3, 6), (9, 14)]}) 
        
        routing.num_steps = 0
        routing.face((5,16),(1,4),{(20, 5): [(11, 4), (16, 14), (18, 13)], (16, 13): [(16, 14), (18, 13)], (18, 13): [(16, 13), (16, 14), (20, 5), (14, 15)], (1, 4): [(11, 4)], (5, 16): [(14, 15)], (16, 14): [(16, 13), (20, 5), (14, 15), (18, 13)], (14, 15): [(5, 16), (16, 14), (18, 13)], (11, 4): [(20, 5), (1, 4)]})
        routing.num_steps = 0
        routing.face((5, 12), (7, 2),{(11, 3): [(18, 6), (7, 2)], (18, 6): [(11, 3)], (2, 12): [(5, 18), (5, 12), (1, 6)], (7, 2): [(11, 3), (1, 6)], (1, 6): [(2, 12), (7, 2)], (5, 12): [(2, 12), (5, 18)], (5, 18): [(2, 12), (5, 12)]})
        routing.num_steps = 0
        routing.face((5, 11), (18, 1),{(9, 10): [(10, 12), (11, 18), (5, 11)], (18, 1): [(19, 10), (13, 0)], (5, 11): [(11, 18), (9, 10)], (19, 10): [(10, 12), (18, 1)], (13, 0): [(18, 1)], (15, 20): [(11, 18)], (11, 18): [(10, 12), (5, 11), (15, 20), (9, 10)], (10, 12): [(19, 10), (11, 18), (9, 10)]})
        routing.num_steps = 0
        routing.face((12, 1), (10, 20), {(12, 1): [(19, 6), (7, 6), (6, 1)], (6, 1): [(12, 1), (7, 6)], (1, 8): [(7, 6), (4, 11)], (19, 16): [(10, 20), (19, 6)], (19, 6): [(12, 1), (19, 16)], (10, 20): [(19, 16)], (7, 6): [(12, 1), (4, 11), (1, 8), (6, 1)], (4, 11): [(7, 6), (1, 8)]})
        routing.num_steps = 0
        routing.face((30, 3), (2, 7),{(36, 7): [(39, 2), (40, 15), (31, 4), (42, 6)], (13, 8): [(14, 10), (12, 11), (16, 5)], (35, 17): [(37, 17), (31, 16), (35, 24)], (32, 30): [(32, 32), (28, 31), (35, 29)], (25, 25): [(20, 26), (24, 23), (27, 30)], (10, 36): [(9, 30), (10, 40), (15, 38)], (37, 17): [(35, 17), (40, 15), (35, 24), (42, 18), (39, 25)], (17, 14): [(14, 10), (13, 15), (20, 14)], (23, 45): [(27, 39), (18, 47), (22, 40), (28, 40)], (43, 23): [(42, 19), (44, 27), (39, 25)], (26, 16): [(29, 15), (22, 18), (24, 13)], (32, 32): [(29, 33), (32, 30), (36, 33)], (44, 40): [(36, 41), (44, 41), (41, 32), (36, 37)], (28, 7): [(30, 3), (19, 4), (26, 10), (31, 4)], (19, 4): [(25, 10), (27, 0), (28, 7), (16, 5)], (42, 18): [(42, 19), (46, 17), (37, 17), (40, 15)], (36, 41): [(30, 37), (28, 40), (44, 40), (44, 41), (36, 37)], (8, 43): [(9, 41), (10, 46), (7, 45)], (10, 40): [(9, 41), (10, 36), (15, 38)], (23, 13): [(22, 18), (24, 13), (20, 14)], (14, 10): [(17, 14), (12, 11), (13, 8)], (20, 26): [(19, 25), (24, 23), (25, 25)], (5, 16): [(8, 20), (4, 20), (3, 14), (10, 16)], (4, 27): [(0, 35), (9, 30), (6, 24)], (24, 23): [(22, 18), (20, 26), (25, 25)], (4, 20): [(8, 20), (5, 16), (6, 24)], (8, 20): [(5, 16), (4, 20), (6, 24), (11, 18)], (41, 32): [(47, 29), (36, 33), (44, 40), (44, 27), (39, 25)], (29, 15): [(26, 16), (26, 10), (31, 16)], (40, 15): [(37, 17), (36, 7), (44, 12), (42, 18)], (39, 25): [(43, 23), (37, 17), (35, 24), (41, 32), (35, 29), (44, 27)], (22, 18): [(14, 20), (19, 25), (26, 16), (24, 23), (23, 13), (20, 14)], (29, 33): [(24, 36), (32, 32), (28, 31), (30, 37)], (3, 14): [(5, 16), (2, 7)], (42, 6): [(39, 2), (36, 7), (44, 12)], (47, 29): [(47, 28), (41, 32)], (44, 12): [(46, 17), (40, 15), (42, 6)], (16, 5): [(19, 4), (13, 8), (20, 14)], (11, 18): [(8, 20), (14, 20), (13, 15), (10, 16)], (9, 30): [(6, 24), (10, 36), (4, 27)], (20, 14): [(22, 18), (17, 14), (16, 5), (23, 13)], (6, 24): [(8, 20), (4, 20), (9, 30), (4, 27)], (25, 10): [(24, 13), (19, 4), (26, 10)], (39, 2): [(36, 7), (31, 4), (42, 6)], (46, 17): [(44, 12), (42, 18)], (9, 41): [(10, 40), (8, 43)], (31, 16): [(29, 15), (35, 17)], (15, 38): [(18, 47), (16, 37), (10, 40), (10, 36)], (16, 37): [(24, 36), (22, 40), (15, 38)], (42, 19): [(43, 23), (42, 18)], (36, 33): [(32, 32), (41, 32), (35, 29), (36, 37)], (27, 30): [(28, 31), (25, 25)], (27, 39): [(24, 36), (22, 40), (30, 37), (23, 45), (28, 40)], (7, 45): [(10, 46), (8, 43)], (10, 16): [(5, 16), (13, 15), (11, 18)], (28, 31): [(29, 33), (32, 30), (27, 30)], (28, 40): [(27, 39), (30, 37), (36, 41), (23, 45)], (30, 37): [(27, 39), (29, 33), (36, 41), (28, 40), (36, 37)], (24, 36): [(27, 39), (29, 33), (22, 40), (16, 37)], (10, 46): [(18, 47), (8, 43), (7, 45)], (30, 3): [(27, 0), (28, 7), (31, 4)], (18, 47): [(10, 46), (23, 45), (15, 38)], (47, 28): [(47, 29), (44, 27)], (36, 37): [(30, 37), (36, 41), (36, 33), (44, 40)], (31, 4): [(39, 2), (30, 3), (36, 7), (28, 7)], (0, 35): [(4, 27)], (35, 29): [(32, 30), (36, 33), (35, 24), (39, 25)], (44, 41): [(36, 41), (44, 40)], (27, 0): [(30, 3), (19, 4)], (2, 7): [(3, 14)], (22, 40): [(27, 39), (24, 36), (23, 45), (16, 37)], (24, 13): [(25, 10), (26, 16), (23, 13)], (26, 10): [(29, 15), (25, 10), (28, 7)], (12, 11): [(14, 10), (13, 15), (13, 8)], (14, 20): [(22, 18), (19, 25), (13, 15), (11, 18)], (19, 25): [(14, 20), (22, 18), (20, 26)], (13, 15): [(14, 20), (17, 14), (12, 11), (10, 16), (11, 18)], (44, 27): [(43, 23), (47, 28), (41, 32), (39, 25)], (35, 24): [(35, 17), (37, 17), (35, 29), (39, 25)]}) 

    def test_left(self):
        routing.recovery = "left"
        routing.greedy((19, 25),(2, 10),{(18, 20): [(17, 20), (12, 21), (12, 27), (24, 13), (21, 27), (19, 25), (20, 16), (22, 16), (24, 17)], (9, 5): [(5, 2), (2, 10), (5, 8), (6, 6), (3, 2), (15, 0), (13, 7), (6, 11)], (4, 21): [(8, 23), (10, 28), (12, 21), (1, 27), (12, 27), (9, 27), (6, 25), (10, 29)], (24, 17): [(26, 16), (17, 20), (24, 13), (18, 20), (19, 25), (20, 16), (23, 11), (22, 16)], (6, 11): [(2, 10), (9, 5), (5, 8), (6, 6), (3, 2), (13, 7)], (1, 27): [(10, 28), (9, 27), (6, 25), (4, 21), (10, 29)], (22, 7): [(15, 6), (17, 4), (24, 13), (15, 0), (20, 16), (23, 11), (22, 16), (13, 7)], (20, 16): [(17, 20), (12, 21), (22, 7), (24, 13), (18, 20), (19, 25), (23, 11), (22, 16), (24, 17)], (22, 16): [(17, 20), (22, 7), (24, 13), (18, 20), (19, 25), (20, 16), (23, 11), (24, 17)], (12, 21): [(8, 23), (17, 20), (12, 27), (9, 27), (6, 25), (4, 21), (18, 20), (19, 25), (20, 16), (10, 29)], (21, 27): [(12, 27), (18, 20), (19, 25)], (12, 27): [(10, 28), (17, 20), (12, 21), (9, 27), (6, 25), (4, 21), (18, 20), (21, 27), (19, 25), (10, 29)], (17, 20): [(8, 23), (12, 21), (12, 27), (24, 13), (18, 20), (19, 25), (20, 16), (22, 16), (24, 17)], (8, 23): [(17, 20), (12, 21), (9, 27), (6, 25), (4, 21)], (13, 7): [(9, 5), (5, 8), (6, 6), (15, 6), (17, 4), (22, 7), (15, 0), (6, 11)], (2, 10): [(9, 5), (5, 8), (6, 6), (3, 2), (6, 11)], (6, 6): [(5, 2), (2, 10), (9, 5), (5, 8), (15, 6), (3, 2), (13, 7), (6, 11)], (24, 13): [(26, 16), (17, 20), (22, 7), (18, 20), (20, 16), (23, 11), (22, 16), (24, 17)], (26, 16): [(24, 13), (24, 17)], (10, 29): [(10, 28), (12, 21), (1, 27), (12, 27), (9, 27), (6, 25), (4, 21), (19, 25)], (23, 11): [(15, 6), (17, 4), (22, 7), (24, 13), (20, 16), (22, 16), (24, 17)], (6, 25): [(8, 23), (10, 28), (12, 21), (1, 27), (12, 27), (9, 27), (4, 21), (10, 29)], (3, 2): [(5, 2), (2, 10), (9, 5), (5, 8), (6, 6), (6, 11)], (17, 4): [(15, 6), (22, 7), (15, 0), (23, 11), (13, 7)], (5, 2): [(9, 5), (6, 6), (3, 2)], (5, 8): [(2, 10), (9, 5), (6, 6), (3, 2), (13, 7), (6, 11)], (19, 25): [(17, 20), (12, 21), (12, 27), (18, 20), (21, 27), (20, 16), (22, 16), (24, 17), (10, 29)], (15, 6): [(6, 6), (17, 4), (22, 7), (15, 0), (23, 11), (13, 7)], (15, 0): [(9, 5), (15, 6), (17, 4), (22, 7), (13, 7)], (9, 27): [(8, 23), (10, 28), (12, 21), (1, 27), (12, 27), (6, 25), (4, 21), (10, 29)], (10, 28): [(1, 27), (12, 27), (9, 27), (6, 25), (4, 21), (10, 29)]},{(18, 20): [(17, 20), (12, 21), (12, 27), (24, 13), (21, 27), (19, 25), (20, 16), (22, 16), (24, 17)], (9, 5): [(5, 2), (2, 10), (5, 8), (6, 6), (3, 2), (15, 0), (13, 7), (6, 11)], (4, 21): [(8, 23), (10, 28), (12, 21), (1, 27), (12, 27), (9, 27), (6, 25), (10, 29)], (24, 17): [(26, 16), (17, 20), (24, 13), (18, 20), (19, 25), (20, 16), (23, 11), (22, 16)], (6, 11): [(2, 10), (9, 5), (5, 8), (6, 6), (3, 2), (13, 7)], (1, 27): [(10, 28), (9, 27), (6, 25), (4, 21), (10, 29)], (22, 7): [(15, 6), (17, 4), (24, 13), (15, 0), (20, 16), (23, 11), (22, 16), (13, 7)], (20, 16): [(17, 20), (12, 21), (22, 7), (24, 13), (18, 20), (19, 25), (23, 11), (22, 16), (24, 17)], (22, 16): [(17, 20), (22, 7), (24, 13), (18, 20), (19, 25), (20, 16), (23, 11), (24, 17)], (12, 21): [(8, 23), (17, 20), (12, 27), (9, 27), (6, 25), (4, 21), (18, 20), (19, 25), (20, 16), (10, 29)], (21, 27): [(12, 27), (18, 20), (19, 25)], (12, 27): [(10, 28), (17, 20), (12, 21), (9, 27), (6, 25), (4, 21), (18, 20), (21, 27), (19, 25), (10, 29)], (17, 20): [(8, 23), (12, 21), (12, 27), (24, 13), (18, 20), (19, 25), (20, 16), (22, 16), (24, 17)], (8, 23): [(17, 20), (12, 21), (9, 27), (6, 25), (4, 21)], (13, 7): [(9, 5), (5, 8), (6, 6), (15, 6), (17, 4), (22, 7), (15, 0), (6, 11)], (2, 10): [(9, 5), (5, 8), (6, 6), (3, 2), (6, 11)], (6, 6): [(5, 2), (2, 10), (9, 5), (5, 8), (15, 6), (3, 2), (13, 7), (6, 11)], (24, 13): [(26, 16), (17, 20), (22, 7), (18, 20), (20, 16), (23, 11), (22, 16), (24, 17)], (26, 16): [(24, 13), (24, 17)], (10, 29): [(10, 28), (12, 21), (1, 27), (12, 27), (9, 27), (6, 25), (4, 21), (19, 25)], (23, 11): [(15, 6), (17, 4), (22, 7), (24, 13), (20, 16), (22, 16), (24, 17)], (6, 25): [(8, 23), (10, 28), (12, 21), (1, 27), (12, 27), (9, 27), (4, 21), (10, 29)], (3, 2): [(5, 2), (2, 10), (9, 5), (5, 8), (6, 6), (6, 11)], (17, 4): [(15, 6), (22, 7), (15, 0), (23, 11), (13, 7)], (5, 2): [(9, 5), (6, 6), (3, 2)], (5, 8): [(2, 10), (9, 5), (6, 6), (3, 2), (13, 7), (6, 11)], (19, 25): [(17, 20), (12, 21), (12, 27), (18, 20), (21, 27), (20, 16), (22, 16), (24, 17), (10, 29)], (15, 6): [(6, 6), (17, 4), (22, 7), (15, 0), (23, 11), (13, 7)], (15, 0): [(9, 5), (15, 6), (17, 4), (22, 7), (13, 7)], (9, 27): [(8, 23), (10, 28), (12, 21), (1, 27), (12, 27), (6, 25), (4, 21), (10, 29)], (10, 28): [(1, 27), (12, 27), (9, 27), (6, 25), (4, 21), (10, 29)]})
    
    def test_quick_face(self):
        routing.loop_recovery = True
        print("TODO")

if __name__ == '__main__':
    unittest.main()